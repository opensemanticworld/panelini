{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcca panelini \ud83d\udc0d","text":"<p><code>panelini</code> is a user-friendly Python package designed to provide an out-of-the-box panel with a beautiful and responsive layout. It simplifies the creation of interactive dashboards by handling dynamic content seamlessly using Python Panel components. Whether you're building complex data visualizations or simple interactive interfaces, <code>panelini</code> offers an easy-to-use solution that enhances productivity and aesthetics.</p>"},{"location":"#table-of-contents","title":"\ud83d\udce6 Table of Contents","text":"<ul> <li>\ud83d\udcc4 Features</li> <li>\ud83d\ude80 Install</li> <li>\ud83d\udca5 Usage</li> <li>\ud83d\udede Commands</li> <li>\ud83e\udda5 Authors</li> <li>\ud83d\udcdc Content Attribution</li> </ul>"},{"location":"#features","title":"\ud83d\udcc4 Features","text":"<ul> <li>Easy Setup: Quickly get started with minimal configuration.</li> <li>Beautiful Layouts: Pre-designed, aesthetically pleasing layouts that can be customized to fit your needs.</li> <li>Dynamic Content: Efficiently manage and display dynamic content using robust Python Panel components.</li> <li>Extensible: Easily extend and integrate with other Python libraries and tools.</li> <li>Published on PyPI: Install effortlessly using pip.</li> </ul>"},{"location":"#install","title":"\ud83d\ude80 Install","text":"<p>Recommended</p> <pre><code>uv add panelini\n</code></pre> <p>or use pip</p> <pre><code>pip install panelini\n</code></pre>"},{"location":"#usage","title":"\ud83d\udca5 Usage","text":"<p>A minimal example to run <code>Panelini</code> can be found in the <code>examples/panelini_min.py</code> file. Below is a simple code snippet to get you started:</p> <pre><code>from panel import Card\nfrom panelini import Panelini\n\n# Create an instance of Panelini\napp = Panelini(\n    title=\"\ud83d\udcca Welcome to Panelini! \ud83d\udda5\ufe0f\",\n    # main = main_objects # init objects here\n)\n# Or set objects outside\napp.main_set(\n    # Use panel components to build your layout\n    objects=[\n        Card(\n            title=\"Set complete main objects\",\n            objects=[\"Some content goes here\"],\n            width=300,\n            max_height=200,\n        )\n    ]\n)\n# Servable for debugging using command\n# panel serve &lt;panelini_min.py --dev\napp.servable()\n\nif __name__ == \"__main__\":\n    # Serve app as you would in panel\n    app.serve(port=5010)\n</code></pre> <p>See examples directory for more usage scenarios.</p>"},{"location":"#commands","title":"\ud83d\udede Commands","text":"<p>Panel command to serve with static content</p> <pre><code>panel serve src/panelini/main.py --dev --port 5006 --static-dirs assets=\"src/panelini/assets\" --ico-path src/panelini/assets/favicon.ico\n</code></pre> <p>When using <code>panel serve</code>, make sure to specify the correct paths for your static assets and favicon.</p>"},{"location":"#authors","title":"\ud83e\udda5 Authors","text":"<ul> <li>Andreas R\u00e4der</li> <li>Linus Schenk</li> </ul>"},{"location":"#content-attribution","title":"\ud83d\udcdc Content Attribution","text":"<p>The authors initially generated the logo and banner for this repository using DALL-E 3 and later modified it to better align with the project's vision.</p>"},{"location":"modules/","title":"Modules","text":"<p>Main entry point for the Panelini application containing header and content area, where the content area includes a left as well as right sidebar and also the main area.</p>"},{"location":"modules/#panelini.main.Panelini","title":"<code>Panelini</code>","text":"<p>               Bases: <code>Parameterized</code></p> <p>Main class for the Panelini application.</p> Source code in <code>src/panelini/main.py</code> <pre><code>class Panelini(param.Parameterized):  # type: ignore[no-any-unimported]\n    \"\"\"Main class for the Panelini application.\"\"\"\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$ BEGIN CLASSVARS $$$$$$$$$$$$$$$$$$$$$$$$$$\n    logo = param.ClassSelector(\n        class_=(str, Path),\n        default=_LOGO,\n        doc=\"Logo image for the application. Can be a string path or pathlib.Path.\",\n    )\n\n    logo_link_url = param.String(\n        default=\"/\",\n        doc=\"Logo provided link to given URL.\",\n    )\n\n    title = param.String(\n        default=\"\ud83d\udcca HELLO PANELINI \ud83d\udc0d\",\n        doc=\"Title of the application.\",\n    )\n\n    header_background_image = param.ClassSelector(\n        class_=(str, Path),\n        default=_HEADER_BACKGROUND_IMAGE,\n        doc=\"Background image for the header section.\",\n    )\n\n    content_background_image = param.ClassSelector(\n        class_=(str, Path),\n        default=_CONTENT_BACKGROUND_IMAGE,\n        doc=\"Background image for the content section.\",\n    )\n\n    static_dir = param.ClassSelector(\n        class_=(str, Path),\n        default=_ASSETS,\n        doc=\"Directory for serving static assets.\",\n    )\n\n    main = param.List(\n        default=[],\n        item_type=panel.viewable.Viewable,\n        doc=\"List of Panel objects to be displayed in main area.\",\n    )\n\n    sidebar = param.List(\n        default=[],\n        item_type=panel.viewable.Viewable,\n        doc=\"List of Panel objects to be displayed in left sidebar.\",\n    )\n\n    sidebar_right = param.List(\n        default=[],\n        item_type=panel.viewable.Viewable,\n        doc=\"List of Panel objects to be displayed in right sidebar.\",\n    )\n\n    sidebar_enabled = param.Boolean(\n        default=True,\n        doc=\"Enable or disable the left sidebar.\",\n    )\n\n    sidebar_right_enabled = param.Boolean(\n        default=False,\n        doc=\"Enable or disable the right sidebar.\",\n    )\n\n    sidebar_visible = param.Boolean(\n        default=True,\n        doc=\"Enable or disable the collapsing of the left sidebar.\",\n    )\n\n    sidebar_right_visible = param.Boolean(\n        default=False,\n        doc=\"Enable or disable the collapsing of the right sidebar.\",\n    )\n\n    sidebars_max_width = param.Integer(\n        default=300,\n        bounds=(100, 500),\n        doc=\"Maximum width of the sidebars as integer in px.\",\n    )\n\n    footer = param.List(\n        default=[],\n        item_type=panel.viewable.Viewable,\n        doc=\"List of Panel objects to be displayed in the footer.\",\n    )\n\n    footer_enabled = param.Boolean(\n        default=False,\n        doc=\"Enable or disable the footer.\",\n    )\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$ ENDOF CLASSVARS $$$$$$$$$$$$$$$$$$$$$$$$$$\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$$$ BEGIN UTILS $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    # TODO: Outsource to utils directory in separate python files\n    # TODO: Write test for this function below, also check different panel objects than Card\n    def _css_classes_extend(self, objects: list[panel.viewable.Viewable], css_classes: list[str]) -&gt; None:\n        \"\"\"Add CSS classes to a list of Panel objects.\"\"\"\n        for obj in objects:\n            if isinstance(obj, panel.viewable.Viewable):\n                obj.css_classes.extend(css_classes)\n\n    def _css_classes_set(self, objects: list[panel.viewable.Viewable], css_classes: list[str]) -&gt; None:\n        \"\"\"Set CSS classes for a list of Panel objects, avoiding duplicates.\"\"\"\n        for obj in objects:\n            if isinstance(obj, panel.viewable.Viewable):\n                obj.css_classes += list(set(obj.css_classes).union(css_classes))\n\n    # TODO: Write test for this function below, also check different panel objects than Card\n    def _sidebar_object_width_extend(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n        \"\"\"Extend the width of sidebar cards.\"\"\"\n        for obj in objects:\n            if isinstance(obj, panel.viewable.Viewable):\n                obj.width = self._sidebar_object_width\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$$$ ENDOF UTILS $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$$$ BEGIN INIT $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    def __init__(self, **params: Any) -&gt; None:\n        super().__init__(**params)\n        # self.servable = servable\n        self._css_main_load()\n        # Navbar: 1st section of the panel\n        self._navbar_set()\n        self._header_set()\n        # Content: 2nd section of the panel\n        self._sidebar_config_set()\n        self._main_set()\n        self._content_set()\n        self._panel_set()\n\n    def __panel__(self) -&gt; panel.viewable.Viewable:\n        \"\"\"Return the main panel for the application.\"\"\"\n        return self._panel\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$$$ ENDOF INIT $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$$ BEGIN PRIV DEF $$$$$$$$$$$$$$$$$$$$$$$$$$$\n    def _css_main_load(self) -&gt; None:\n        \"\"\"Load custom CSS for the application.\"\"\"\n        panel.config.raw_css.append(_MAIN_CSS.read_text())\n\n        # Set navbar background image\n        panel.config.raw_css.append(\n            f\".navbar {{ background-image: url(/assets/{os.path.basename(self.header_background_image)}); }}\"\n        )\n        # Set content background image\n        panel.config.raw_css.append(\n            f\".content {{ background-image: url(/assets/{os.path.basename(self.content_background_image)}); }}\"\n        )\n\n    def _sidebar_config_set(self) -&gt; None:\n        \"\"\"Set the configuration for the sidebars.\"\"\"\n        self._sidebar_max_width = int(self.sidebars_max_width)\n        self._sidebar_inner_width = int(self.sidebars_max_width * 0.91)\n        self._sidebar_object_width = int(self.sidebars_max_width * 0.88)\n        self._sidebar_card_elem_width = int(self.sidebars_max_width * 0.80)\n        self._sidebar_card_spacer_height = int(self.sidebars_max_width * 0.06)\n\n    def _sidebar_right_set(self) -&gt; None:\n        \"\"\"Set the sidebar with the defined objects.\"\"\"\n        self._sidebar_right = panel.Column(\n            css_classes=[\"card\", \"sidebar\", \"right-sidebar\"],\n            # sizing_mode=\"stretch_both\",\n            max_width=self.sidebars_max_width,\n            visible=self.sidebar_right_visible,  # Initially hidden\n            objects=self.sidebar_right_get(),\n        )\n        # Extend right sidebar objects with css_classes and card width\n        self._css_classes_extend(self._sidebar_right.objects, [\"card\", \"sidebar-card\", \"right-sidebar-card\"])\n        self._sidebar_object_width_extend(self._sidebar_right.objects)\n\n    def _sidebar_right_toggle(self, event: Any) -&gt; None:\n        \"\"\"Toggle the visibility of the sidebar.\"\"\"\n        # Private cause of _sidebar_right object must exist to use this method\n        # When making this public, consider enabling sidebar_right_enabled initially\n        # or set it automatically to enabled or at least check if _sidebar_right exists\n        if self._sidebar_right.visible:\n            self._sidebar_right.visible = False\n        else:\n            self._sidebar_right.visible = True\n\n    def _sidebar_left_set(self) -&gt; None:\n        \"\"\"Set the left sidebar with the defined objects.\"\"\"\n        # Set full left sidebar\n        self._sidebar_left = panel.Column(\n            css_classes=[\"card\", \"sidebar\", \"left-sidebar\"],\n            visible=self.sidebar_visible,  # Initially visible\n            sizing_mode=\"stretch_both\",\n            max_width=self._sidebar_max_width,\n            objects=self.sidebar_get(),\n        )\n        # Extend sidebar objects with css_classes and card width\n        self._css_classes_extend(self._sidebar_left.objects, [\"card\", \"sidebar-card\", \"left-sidebar-card\"])\n        self._sidebar_object_width_extend(self._sidebar_left.objects)\n\n    def _sidebar_left_toggle(self, event: Any) -&gt; None:\n        \"\"\"Toggle the visibility of the sidebar.\"\"\"\n        # Private cause of _sidebar_left object must exist to use this method\n        # When making this public, consider enabling sidebar_left_enabled initially\n        # or set it automatically to enabled or at least check if _sidebar_left exists\n        if self._sidebar_left.visible:\n            self._sidebar_left.visible = False\n        else:\n            self._sidebar_left.visible = True\n\n    def _main_set(self) -&gt; None:\n        \"\"\"Set or update main area Column.\"\"\"\n        if hasattr(self, \"_main\") and hasattr(self._main, \"objects\"):\n            self._main.objects = self.main_get()\n        else:\n            self._main: panel.Column = panel.Column(\n                css_classes=[\"main\", \"gridstack\"],\n                objects=self.main_get(),\n            )\n\n    def _content_set(self) -&gt; None:\n        \"\"\"Set the layout of the content area.\"\"\"\n        self._content = panel.Row(\n            css_classes=[\"content\"],\n            objects=[],  # Appended below, parts conditionally\n            sizing_mode=\"scale_both\",\n        )\n\n        # Left sidebar\n        if self.sidebar_enabled:\n            self._sidebar_left_set()\n            self._content.objects.append(self._sidebar_left)\n\n        # Main content\n        self._content.objects.append(self._main)\n\n        # Right sidebar\n        if self.sidebar_right_enabled:\n            self._sidebar_right_set()\n            self._content.objects.append(self._sidebar_right)\n\n    def _footer_set(self) -&gt; None:\n        \"\"\"Set the footer layout with objects.\"\"\"\n        self._footer = panel.Row(\n            css_classes=[\"footer\", \"navbar\"],\n            sizing_mode=\"stretch_width\",\n            objects=self._navbar,\n        )\n\n    def _header_set(self) -&gt; None:\n        \"\"\"Set the header layout with objects.\"\"\"\n        self._header = panel.Row(\n            css_classes=[\"header\", \"navbar\"],\n            sizing_mode=\"stretch_width\",\n            objects=self._navbar,\n        )\n\n    def _navbar_set(self) -&gt; None:\n        \"\"\"Set the navbar objects, only type Column is allowed in tests.\"\"\"\n        self._navbar = []\n\n        # Button: Toggle Left Sidebar (=sidebar)\n        if self.sidebar_enabled:\n            self._navbar.append(\n                panel.Column(\n                    align=\"center\",\n                    objects=[\n                        panel.widgets.Button(\n                            css_classes=[\"left-navbar-button\"],\n                            button_style=\"outline\",\n                            icon=\"menu-2\",\n                            icon_size=\"2em\",\n                            on_click=self._sidebar_left_toggle,\n                        ),\n                    ],\n                ),\n            )\n\n        # Logo\n        self._navbar.append(\n            panel.Column(\n                align=\"center\",\n                max_width=140,\n                objects=[\n                    panel.pane.image.Image(str(self.logo), link_url=self.logo_link_url, height=50),\n                ],\n            )\n        )\n\n        # Title\n        self._navbar.append(\n            panel.Column(\n                align=\"center\",\n                sizing_mode=\"stretch_width\",\n                objects=[\n                    panel.pane.HTML(\n                        f\"&lt;h1&gt;{self.title}&lt;/h1&gt;\",\n                    ),\n                ],\n            )\n        )\n\n        # Button: Toggle Right Sidebar if enabled\n        if self.sidebar_right_enabled:\n            self._navbar.append(\n                panel.Column(\n                    align=\"center\",\n                    objects=[\n                        panel.widgets.Button(\n                            css_classes=[\"right-navbar-button\"],\n                            button_style=\"outline\",\n                            icon=\"menu-2\",\n                            icon_size=\"2em\",\n                            on_click=self._sidebar_right_toggle,\n                        ),\n                    ],\n                )\n            )\n\n    def _panel_set(self) -&gt; None:\n        \"\"\"Update the main panel with the current layout.\"\"\"\n        self._panel = panel.Column(\n            css_classes=[\"panel\"],\n            sizing_mode=\"scale_both\",\n            objects=[],  # Appended below, parts conditionally\n        )\n\n        # Header\n        self._panel.objects.append(self._header)\n\n        # Content\n        self._panel.objects.append(self._content)\n\n        # Footer if enabled\n        if self.footer_enabled:\n            self._footer_set()\n            self._panel.objects.append(self._footer)\n\n    # TODO: Add tests of param.depends functions\n    @param.depends(\"main\", watch=True)\n    def _panel_update_main(self) -&gt; None:\n        \"\"\"Update the panel with the current layout of the main content.\"\"\"\n        self._main_set()\n        # self._css_classes_set(self._main.objects, [\"main-object\"])\n        self._content_set()\n        self._panel_set()\n        print(\"TRIGGER: Main panel updated\")\n\n    @param.depends(\"sidebar\", watch=True)\n    def _panel_update_sidebar_left(self) -&gt; None:\n        \"\"\"Update the panel with the current layout of the left sidebar.\"\"\"\n        self._sidebar_left_set()\n        self._content_set()\n        self._panel_set()\n\n    @param.depends(\"sidebar_right\", watch=True)\n    def _panel_update_sidebar_right(self) -&gt; None:\n        \"\"\"Update the panel with the current layout of the right sidebar.\"\"\"\n        self._sidebar_right_set()\n        self._content_set()\n        self._panel_set()\n\n    @param.depends(\"footer\", watch=footer_enabled)\n    def _panel_update_footer(self) -&gt; None:\n        \"\"\"Update the panel with the current layout of the footer.\"\"\"\n        self._footer_set()\n        self._panel_set()\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$$ ENDOF PRIV DEF $$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n    # $$$$$$$$$$$$$$$$$$$$$$$$$$$ BEGIN PUBL DEF $$$$$$$$$$$$$$$$$$$$$$$$$$$\n    def sidebar_right_set(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n        \"\"\"Set the right sidebar objects.\"\"\"\n        self.sidebar_right = objects\n\n    def sidebar_right_get(self) -&gt; list[panel.viewable.Viewable]:\n        \"\"\"Get the right sidebar objects.\"\"\"\n        return list(self.sidebar_right)\n\n    def sidebar_set(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n        \"\"\"Set the left sidebar objects.\"\"\"\n        self.sidebar = objects\n\n    def sidebar_get(self) -&gt; list[panel.viewable.Viewable]:\n        \"\"\"Get the sidebar objects.\"\"\"\n        return list(self.sidebar)\n\n    # TODO: define main_clear function and test\n\n    def main_remove_index(self, index: int) -&gt; None:\n        \"\"\"Remove an object from the main content area by index.\"\"\"\n        if 0 &lt;= index &lt; len(self.main):\n            del self.main[index]\n            self.param.trigger(\"main\")\n\n    def main_add(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n        \"\"\"Add objects to the main content area and update the dashboard, applying CSS instantly.\"\"\"\n        self.main.extend(objects)\n        self._css_classes_set(objects, [\"main-object\"])\n        self.param.trigger(\"main\")\n\n    def main_set(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n        \"\"\"Set the main objects and apply CSS instantly.\"\"\"\n        self.main = objects\n        self._css_classes_set(objects, [\"main-object\"])\n        self.param.trigger(\"main\")\n\n    def main_get(self) -&gt; list[panel.viewable.Viewable]:\n        \"\"\"Get the main objects.\"\"\"\n        return list(self.main)\n\n    # TODO: Add tests for serve functions below\n    def servable(self, **kwargs: Any) -&gt; panel.viewable.Viewable:\n        \"\"\"Make the application servable with additional parameters.\"\"\"\n        kwargs[\"title\"] = kwargs.get(\"title\", self.title)\n        return panel.viewable.Viewable.servable(\n            self._panel,\n            **kwargs,\n        )\n\n    def serve(self, **kwargs: Any) -&gt; StoppableThread | Server:\n        \"\"\"Serve the application.\"\"\"\n        return panel.io.server.serve(\n            self.__panel__(),\n            title=str(self.title),\n            ico_path=str(_FAVICON_URL),\n            static_dirs={\"/assets\": self.static_dir},\n            **kwargs,\n        )\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.__panel__","title":"<code>__panel__()</code>","text":"<p>Return the main panel for the application.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def __panel__(self) -&gt; panel.viewable.Viewable:\n    \"\"\"Return the main panel for the application.\"\"\"\n    return self._panel\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.main_add","title":"<code>main_add(objects)</code>","text":"<p>Add objects to the main content area and update the dashboard, applying CSS instantly.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def main_add(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n    \"\"\"Add objects to the main content area and update the dashboard, applying CSS instantly.\"\"\"\n    self.main.extend(objects)\n    self._css_classes_set(objects, [\"main-object\"])\n    self.param.trigger(\"main\")\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.main_get","title":"<code>main_get()</code>","text":"<p>Get the main objects.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def main_get(self) -&gt; list[panel.viewable.Viewable]:\n    \"\"\"Get the main objects.\"\"\"\n    return list(self.main)\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.main_remove_index","title":"<code>main_remove_index(index)</code>","text":"<p>Remove an object from the main content area by index.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def main_remove_index(self, index: int) -&gt; None:\n    \"\"\"Remove an object from the main content area by index.\"\"\"\n    if 0 &lt;= index &lt; len(self.main):\n        del self.main[index]\n        self.param.trigger(\"main\")\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.main_set","title":"<code>main_set(objects)</code>","text":"<p>Set the main objects and apply CSS instantly.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def main_set(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n    \"\"\"Set the main objects and apply CSS instantly.\"\"\"\n    self.main = objects\n    self._css_classes_set(objects, [\"main-object\"])\n    self.param.trigger(\"main\")\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.servable","title":"<code>servable(**kwargs)</code>","text":"<p>Make the application servable with additional parameters.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def servable(self, **kwargs: Any) -&gt; panel.viewable.Viewable:\n    \"\"\"Make the application servable with additional parameters.\"\"\"\n    kwargs[\"title\"] = kwargs.get(\"title\", self.title)\n    return panel.viewable.Viewable.servable(\n        self._panel,\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.serve","title":"<code>serve(**kwargs)</code>","text":"<p>Serve the application.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def serve(self, **kwargs: Any) -&gt; StoppableThread | Server:\n    \"\"\"Serve the application.\"\"\"\n    return panel.io.server.serve(\n        self.__panel__(),\n        title=str(self.title),\n        ico_path=str(_FAVICON_URL),\n        static_dirs={\"/assets\": self.static_dir},\n        **kwargs,\n    )\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.sidebar_get","title":"<code>sidebar_get()</code>","text":"<p>Get the sidebar objects.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def sidebar_get(self) -&gt; list[panel.viewable.Viewable]:\n    \"\"\"Get the sidebar objects.\"\"\"\n    return list(self.sidebar)\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.sidebar_right_get","title":"<code>sidebar_right_get()</code>","text":"<p>Get the right sidebar objects.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def sidebar_right_get(self) -&gt; list[panel.viewable.Viewable]:\n    \"\"\"Get the right sidebar objects.\"\"\"\n    return list(self.sidebar_right)\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.sidebar_right_set","title":"<code>sidebar_right_set(objects)</code>","text":"<p>Set the right sidebar objects.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def sidebar_right_set(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n    \"\"\"Set the right sidebar objects.\"\"\"\n    self.sidebar_right = objects\n</code></pre>"},{"location":"modules/#panelini.main.Panelini.sidebar_set","title":"<code>sidebar_set(objects)</code>","text":"<p>Set the left sidebar objects.</p> Source code in <code>src/panelini/main.py</code> <pre><code>def sidebar_set(self, objects: list[panel.viewable.Viewable]) -&gt; None:\n    \"\"\"Set the left sidebar objects.\"\"\"\n    self.sidebar = objects\n</code></pre>"}]}